#BlueJ class context
comment0.target=Picture
comment0.text=\r\n\ \ This\ class\ provides\ methods\ for\ manipulating\ individual\ pixels\ of\r\n\ \ an\ image.\ The\ original\ image\ can\ be\ read\ from\ a\ {@code\ .jpg},\ {@code\ .gif},\r\n\ \ or\ {@code\ .png}\ file\ or\ the\ user\ can\ create\ a\ blank\ image\ of\ a\ given\ size.\r\n\ \ This\ class\ includes\ methods\ for\ displaying\ the\ image\ in\ a\ window\ on\r\n\ \ the\ screen\ or\ saving\ it\ to\ a\ file.\r\n\ \ <p>\r\n\ \ Pixel\ (<em>col</em>,\ <em>row</em>)\ is\ column\ <em>col</em>\ and\ row\ <em>row</em>.\r\n\ \ By\ default,\ the\ origin\ (0,\ 0)\ is\ the\ pixel\ in\ the\ top-left\ corner,\r\n\ \ which\ is\ a\ common\ convention\ in\ image\ processing.\r\n\ \ The\ method\ {@code\ setOriginLowerLeft()}\ change\ the\ origin\ to\ the\ lower\ left.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="http\://introcs.cs.princeton.edu/31datatype">Section\ 3.1</a>\ of\r\n\ \ <i>Computer\ Science\:\ An\ Interdisciplinary\ Approach</i>\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=width\ height
comment1.target=Picture(int,\ int)
comment1.text=\r\n\ Initializes\ a\ blank\ {@code\ width}-by-{@code\ height}\ picture,\ with\ {@code\ width}\ columns\r\n\ and\ {@code\ height}\ rows,\ where\ each\ pixel\ is\ black.\r\n\r\n\ @param\ width\ the\ width\ of\ the\ picture\r\n\ @param\ height\ the\ height\ of\ the\ picture\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ width}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ height}\ is\ negative\r\n
comment10.params=
comment10.target=int\ width()
comment10.text=\r\n\ Returns\ the\ width\ of\ the\ picture.\r\n\r\n\ @return\ the\ width\ of\ the\ picture\ (in\ pixels)\r\n
comment11.params=row
comment11.target=void\ validateRowIndex(int)
comment12.params=col
comment12.target=void\ validateColumnIndex(int)
comment13.params=col\ row
comment13.target=java.awt.Color\ get(int,\ int)
comment13.text=\r\n\ Returns\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ as\ a\ {@link\ java.awt.Color}.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @return\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment14.params=col\ row
comment14.target=int\ getRGB(int,\ int)
comment14.text=\r\n\ Returns\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ as\ an\ {@code\ int}.\r\n\ Using\ this\ method\ can\ be\ more\ efficient\ than\ {@link\ \#get()}\ because\ it\ does\ not\r\n\ create\ a\ {@code\ Color}\ object.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @return\ the\ integer\ representation\ of\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment15.params=col\ row\ color
comment15.target=void\ set(int,\ int,\ java.awt.Color)
comment15.text=\r\n\ Sets\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ to\ given\ color.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @param\ color\ the\ color\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment16.params=col\ row\ rgb
comment16.target=void\ setRGB(int,\ int,\ int)
comment16.text=\r\n\ Sets\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ to\ given\ color.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @param\ rgb\ the\ integer\ representation\ of\ the\ color\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment17.params=other
comment17.target=boolean\ equals(java.lang.Object)
comment17.text=\r\n\ Returns\ true\ if\ this\ picture\ is\ equal\ to\ the\ argument\ picture.\r\n\r\n\ @param\ other\ the\ other\ picture\r\n\ @return\ {@code\ true}\ if\ this\ picture\ is\ the\ same\ dimension\ as\ {@code\ other}\r\n\ \ \ \ \ \ \ \ \ and\ if\ all\ pixels\ have\ the\ same\ color;\ {@code\ false}\ otherwise\r\n
comment18.params=
comment18.target=int\ hashCode()
comment18.text=\r\n\ This\ operation\ is\ not\ supported\ because\ pictures\ are\ mutable.\r\n\r\n\ @return\ does\ not\ return\ a\ value\r\n\ @throws\ UnsupportedOperationException\ if\ called\r\n
comment19.params=filename
comment19.target=void\ save(java.lang.String)
comment19.text=\r\n\ Saves\ the\ picture\ to\ a\ file\ in\ a\ standard\ image\ format.\r\n\ The\ filetype\ must\ be\ .png\ or\ .jpg.\r\n\r\n\ @param\ filename\ the\ name\ of\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ name}\ is\ {@code\ null}\r\n
comment2.params=picture
comment2.target=Picture(Picture)
comment2.text=\r\n\ Initializes\ a\ new\ picture\ that\ is\ a\ deep\ copy\ of\ the\ argument\ picture.\r\n\r\n\ @param\ \ picture\ the\ picture\ to\ copy\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ picture}\ is\ {@code\ null}\r\n
comment20.params=file
comment20.target=void\ save(java.io.File)
comment20.text=\r\n\ Saves\ the\ picture\ to\ a\ file\ in\ a\ PNG\ or\ JPEG\ image\ format.\r\n\r\n\ @param\ \ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment21.params=e
comment21.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment21.text=\r\n\ Opens\ a\ save\ dialog\ box\ when\ the\ user\ selects\ "Save\ As"\ from\ the\ menu.\r\n
comment22.params=
comment22.target=java.awt.image.BufferedImage\ getImage()
comment23.params=
comment23.target=void\ setBlackAndWhiteAndCreateMessageArray()
comment24.params=h
comment24.target=java.lang.String\ readMessageArray(int)
comment25.params=col\ row
comment25.target=double\ faaRGB(int,\ int)
comment26.params=
comment26.target=int\ getAntalSortePixels()
comment27.params=
comment27.target=void\ setBlackAndWhite()
comment28.params=
comment28.target=int\ getArrayStoerrelse()
comment29.params=args
comment29.target=void\ main(java.lang.String[])
comment3.params=filename
comment3.target=Picture(java.lang.String)
comment3.text=\r\n\ Initializes\ a\ picture\ by\ reading\ from\ a\ file\ or\ URL.\r\n\r\n\ @param\ \ filename\ the\ name\ of\ the\ file\ (.png,\ .gif,\ or\ .jpg)\ or\ URL.\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ read\ image\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment4.params=file
comment4.target=Picture(java.io.File)
comment4.text=\r\n\ Initializes\ a\ picture\ by\ reading\ in\ a\ .png,\ .gif,\ or\ .jpg\ from\ a\ file.\r\n\r\n\ @param\ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ read\ image\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment5.params=
comment5.target=javax.swing.JLabel\ getJLabel()
comment5.text=\r\n\ Returns\ a\ JLabel\ containing\ this\ picture,\ for\ embedding\ in\ a\ JPanel,\r\n\ JFrame\ or\ other\ GUI\ widget.\r\n\r\n\ @return\ the\ {@code\ JLabel}\r\n
comment6.params=
comment6.target=void\ setOriginUpperLeft()
comment6.text=\r\n\ Sets\ the\ origin\ to\ be\ the\ upper\ left\ pixel.\ This\ is\ the\ default.\r\n
comment7.params=
comment7.target=void\ setOriginLowerLeft()
comment7.text=\r\n\ Sets\ the\ origin\ to\ be\ the\ lower\ left\ pixel.\r\n
comment8.params=
comment8.target=void\ show()
comment8.text=\r\n\ Displays\ the\ picture\ in\ a\ window\ on\ the\ screen.\r\n
comment9.params=
comment9.target=int\ height()
comment9.text=\r\n\ Returns\ the\ height\ of\ the\ picture.\r\n\r\n\ @return\ the\ height\ of\ the\ picture\ (in\ pixels)\r\n
numComments=30
